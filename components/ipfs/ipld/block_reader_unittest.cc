/* Copyright (c) 2024 The Brave Authors. All rights reserved.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at https://mozilla.org/MPL/2.0/. */

#include "brave/components/ipfs/ipld/block_reader.h"
#include "base/ranges/algorithm.h"
#include "base/values.h"
#include "brave/components/ipfs/ipld/car_block_reader.h"
#include "brave/components/ipfs/ipld/car_content_requester.h"

#include <memory>
#include <stack>
#include <string>
#include <unordered_map>

#include "base/containers/contains.h"
#include "base/memory/scoped_refptr.h"
#include "base/test/bind.h"
#include "brave/components/ipfs/ipfs_utils.h"
#include "brave/components/ipfs/ipld/block.h"
#include "chrome/browser/prefs/browser_prefs.h"
#include "chrome/test/base/testing_profile.h"
#include "components/sync_preferences/testing_pref_service_syncable.h"
#include "content/public/test/browser_task_environment.h"
#include "gtest/gtest.h"
#include "net/base/url_util.h"
#include "services/network/public/cpp/weak_wrapper_shared_url_loader_factory.h"
#include "services/network/test/test_url_loader_factory.h"
#include "testing/gtest/include/gtest/gtest.h"
#include "url/gurl.h"

namespace {

const std::vector<unsigned char> kCarvData = {
    0x3A, 0xA2, 0x65, 0x72, 0x6F, 0x6F, 0x74, 0x73, 0x81, 0xD8, 0x2A, 0x58,
    0x25, 0x00, 0x01, 0x70, 0x12, 0x20, 0x67, 0xF2, 0xB5, 0x5C, 0xD1, 0x44,
    0x5C, 0x27, 0x14, 0xC9, 0x83, 0xE3, 0xFB, 0xA1, 0x3D, 0x8B, 0x98, 0xF5,
    0x42, 0xC2, 0x23, 0x98, 0xCD, 0xEC, 0x20, 0xC8, 0xFE, 0xD0, 0xDF, 0x7F,
    0x45, 0xB5, 0x67, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x01, 0x5B,
    0x01, 0x70, 0x12, 0x20, 0x67, 0xF2, 0xB5, 0x5C, 0xD1, 0x44, 0x5C, 0x27,
    0x14, 0xC9, 0x83, 0xE3, 0xFB, 0xA1, 0x3D, 0x8B, 0x98, 0xF5, 0x42, 0xC2,
    0x23, 0x98, 0xCD, 0xEC, 0x20, 0xC8, 0xFE, 0xD0, 0xDF, 0x7F, 0x45, 0xB5,
    0x12, 0x31, 0x0A, 0x24, 0x01, 0x70, 0x12, 0x20, 0x4D, 0x63, 0xD6, 0x4E,
    0x10, 0xEB, 0xCE, 0xDD, 0x29, 0xD7, 0x52, 0x0B, 0x93, 0x9D, 0xE4, 0xE7,
    0xEC, 0x3F, 0x3C, 0xF6, 0x3A, 0x82, 0x8A, 0x37, 0xC0, 0xA8, 0x59, 0x8C,
    0x62, 0x11, 0xBF, 0xBB, 0x12, 0x06, 0x73, 0x75, 0x62, 0x64, 0x69, 0x72,
    0x18, 0xCB, 0x0B, 0x0A, 0x02, 0x08, 0x01, 0xCD, 0x01, 0x01, 0x70, 0x12,
    0x20, 0x4D, 0x63, 0xD6, 0x4E, 0x10, 0xEB, 0xCE, 0xDD, 0x29, 0xD7, 0x52,
    0x0B, 0x93, 0x9D, 0xE4, 0xE7, 0xEC, 0x3F, 0x3C, 0xF6, 0x3A, 0x82, 0x8A,
    0x37, 0xC0, 0xA8, 0x59, 0x8C, 0x62, 0x11, 0xBF, 0xBB, 0x12, 0x33, 0x0A,
    0x24, 0x01, 0x55, 0x12, 0x20, 0xAA, 0x03, 0x3C, 0xD9, 0x70, 0x0E, 0x72,
    0xCD, 0xBB, 0x10, 0x71, 0xE5, 0x33, 0x19, 0x6D, 0x55, 0x87, 0xBC, 0xFE,
    0x3C, 0x82, 0x44, 0x73, 0xEC, 0x6A, 0xAB, 0x8B, 0x4C, 0xB0, 0x7B, 0x4C,
    0xBB, 0x12, 0x09, 0x61, 0x73, 0x63, 0x69, 0x69, 0x2E, 0x74, 0x78, 0x74,
    0x18, 0x1F, 0x12, 0x33, 0x0A, 0x24, 0x01, 0x55, 0x12, 0x20, 0xA9, 0x48,
    0x90, 0x4F, 0x2F, 0x0F, 0x47, 0x9B, 0x8F, 0x81, 0x97, 0x69, 0x4B, 0x30,
    0x18, 0x4B, 0x0D, 0x2E, 0xD1, 0xC1, 0xCD, 0x2A, 0x1E, 0xC0, 0xFB, 0x85,
    0xD2, 0x99, 0xA1, 0x92, 0xA4, 0x47, 0x12, 0x09, 0x68, 0x65, 0x6C, 0x6C,
    0x6F, 0x2E, 0x74, 0x78, 0x74, 0x18, 0x0C, 0x12, 0x39, 0x0A, 0x24, 0x01,
    0x70, 0x12, 0x20, 0xC2, 0x44, 0xA0, 0x3F, 0xB3, 0xAD, 0x2E, 0xE0, 0xCA,
    0x55, 0x23, 0x08, 0x14, 0xBE, 0x84, 0x6D, 0x3F, 0x1C, 0x28, 0xB0, 0x02,
    0x04, 0x14, 0xFA, 0x1F, 0xFF, 0x82, 0x6A, 0x63, 0x32, 0x7A, 0x90, 0x12,
    0x0E, 0x6D, 0x75, 0x6C, 0x74, 0x69, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x2E,
    0x74, 0x78, 0x74, 0x18, 0xF7, 0x09, 0x0A, 0x02, 0x08, 0x01, 0x43, 0x01,
    0x55, 0x12, 0x20, 0xAA, 0x03, 0x3C, 0xD9, 0x70, 0x0E, 0x72, 0xCD, 0xBB,
    0x10, 0x71, 0xE5, 0x33, 0x19, 0x6D, 0x55, 0x87, 0xBC, 0xFE, 0x3C, 0x82,
    0x44, 0x73, 0xEC, 0x6A, 0xAB, 0x8B, 0x4C, 0xB0, 0x7B, 0x4C, 0xBB, 0x68,
    0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61,
    0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x76, 0x6E, 0x64, 0x2E, 0x69, 0x70, 0x6C,
    0x64, 0x2E, 0x63, 0x61, 0x72, 0x0A, 0x30, 0x01, 0x55, 0x12, 0x20, 0xA9,
    0x48, 0x90, 0x4F, 0x2F, 0x0F, 0x47, 0x9B, 0x8F, 0x81, 0x97, 0x69, 0x4B,
    0x30, 0x18, 0x4B, 0x0D, 0x2E, 0xD1, 0xC1, 0xCD, 0x2A, 0x1E, 0xC0, 0xFB,
    0x85, 0xD2, 0x99, 0xA1, 0x92, 0xA4, 0x47, 0x68, 0x65, 0x6C, 0x6C, 0x6F,
    0x20, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x0A, 0x99, 0x02, 0x01, 0x70, 0x12,
    0x20, 0xC2, 0x44, 0xA0, 0x3F, 0xB3, 0xAD, 0x2E, 0xE0, 0xCA, 0x55, 0x23,
    0x08, 0x14, 0xBE, 0x84, 0x6D, 0x3F, 0x1C, 0x28, 0xB0, 0x02, 0x04, 0x14,
    0xFA, 0x1F, 0xFF, 0x82, 0x6A, 0x63, 0x32, 0x7A, 0x90, 0x12, 0x2B, 0x0A,
    0x24, 0x01, 0x55, 0x12, 0x20, 0x9D, 0x6B, 0x94, 0x4D, 0xB0, 0x3F, 0x3C,
    0x2F, 0x45, 0x64, 0x58, 0xFE, 0xDA, 0xBD, 0x6D, 0x5E, 0x5D, 0xE5, 0x9B,
    0xA3, 0xB6, 0xD8, 0xE6, 0xCA, 0x5B, 0x3E, 0xD5, 0x9B, 0x55, 0x3E, 0x52,
    0x13, 0x12, 0x00, 0x18, 0x80, 0x02, 0x12, 0x2B, 0x0A, 0x24, 0x01, 0x55,
    0x12, 0x20, 0xFC, 0x23, 0xCE, 0x04, 0xE0, 0x31, 0x02, 0x7D, 0x66, 0xDE,
    0x41, 0xB2, 0x6C, 0x0F, 0xFC, 0xB4, 0x55, 0x23, 0x37, 0xAF, 0xEE, 0x4F,
    0xE7, 0xF7, 0x96, 0x1D, 0xE7, 0x47, 0x43, 0xBA, 0x7F, 0x14, 0x12, 0x00,
    0x18, 0x80, 0x02, 0x12, 0x2B, 0x0A, 0x24, 0x01, 0x55, 0x12, 0x20, 0xD4,
    0xF8, 0x69, 0x56, 0x6C, 0x45, 0xA3, 0x43, 0xBE, 0xFF, 0xDE, 0x1B, 0x7F,
    0x36, 0x43, 0x07, 0xD5, 0x19, 0xED, 0x64, 0x48, 0x77, 0xB6, 0x46, 0xE8,
    0x33, 0xAD, 0xE9, 0x80, 0x98, 0x4F, 0xA1, 0x12, 0x00, 0x18, 0x80, 0x02,
    0x12, 0x2B, 0x0A, 0x24, 0x01, 0x55, 0x12, 0x20, 0x4B, 0x5E, 0xCF, 0x42,
    0x15, 0x42, 0xDC, 0x1B, 0x1C, 0x91, 0xCD, 0xC7, 0xF2, 0x22, 0xBB, 0xE2,
    0x8E, 0xDA, 0x1B, 0xFB, 0x87, 0x6D, 0xE3, 0x0C, 0xC9, 0x17, 0x78, 0x88,
    0x6D, 0xEF, 0x45, 0x39, 0x12, 0x00, 0x18, 0x80, 0x02, 0x12, 0x2A, 0x0A,
    0x24, 0x01, 0x55, 0x12, 0x20, 0xB2, 0x9E, 0xDF, 0x0C, 0xCE, 0x95, 0x4F,
    0x7E, 0xBC, 0x08, 0x0C, 0x72, 0x3F, 0x9D, 0xF0, 0x3C, 0x23, 0x0B, 0xF3,
    0x02, 0xD7, 0x97, 0xF8, 0xDB, 0x44, 0x5A, 0x17, 0xD2, 0xD1, 0x31, 0xE0,
    0x83, 0x12, 0x00, 0x18, 0x02, 0x0A, 0x13, 0x08, 0x02, 0x18, 0x82, 0x08,
    0x20, 0x80, 0x02, 0x20, 0x80, 0x02, 0x20, 0x80, 0x02, 0x20, 0x80, 0x02,
    0x20, 0x02, 0xA4, 0x02, 0x01, 0x55, 0x12, 0x20, 0x9D, 0x6B, 0x94, 0x4D,
    0xB0, 0x3F, 0x3C, 0x2F, 0x45, 0x64, 0x58, 0xFE, 0xDA, 0xBD, 0x6D, 0x5E,
    0x5D, 0xE5, 0x9B, 0xA3, 0xB6, 0xD8, 0xE6, 0xCA, 0x5B, 0x3E, 0xD5, 0x9B,
    0x55, 0x3E, 0x52, 0x13, 0x4C, 0x6F, 0x72, 0x65, 0x6D, 0x20, 0x69, 0x70,
    0x73, 0x75, 0x6D, 0x20, 0x64, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x73, 0x69,
    0x74, 0x20, 0x61, 0x6D, 0x65, 0x74, 0x2C, 0x20, 0x63, 0x6F, 0x6E, 0x73,
    0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70,
    0x69, 0x73, 0x63, 0x69, 0x6E, 0x67, 0x20, 0x65, 0x6C, 0x69, 0x74, 0x2E,
    0x20, 0x4E, 0x75, 0x6E, 0x63, 0x20, 0x6E, 0x6F, 0x6E, 0x20, 0x69, 0x6D,
    0x70, 0x65, 0x72, 0x64, 0x69, 0x65, 0x74, 0x20, 0x6E, 0x75, 0x6E, 0x63,
    0x2E, 0x20, 0x50, 0x72, 0x6F, 0x69, 0x6E, 0x20, 0x61, 0x63, 0x20, 0x71,
    0x75, 0x61, 0x6D, 0x20, 0x75, 0x74, 0x20, 0x6E, 0x69, 0x62, 0x68, 0x20,
    0x65, 0x6C, 0x65, 0x69, 0x66, 0x65, 0x6E, 0x64, 0x20, 0x61, 0x6C, 0x69,
    0x71, 0x75, 0x65, 0x74, 0x2E, 0x20, 0x56, 0x65, 0x73, 0x74, 0x69, 0x62,
    0x75, 0x6C, 0x75, 0x6D, 0x20, 0x61, 0x6E, 0x74, 0x65, 0x20, 0x69, 0x70,
    0x73, 0x75, 0x6D, 0x20, 0x70, 0x72, 0x69, 0x6D, 0x69, 0x73, 0x20, 0x69,
    0x6E, 0x20, 0x66, 0x61, 0x75, 0x63, 0x69, 0x62, 0x75, 0x73, 0x20, 0x6F,
    0x72, 0x63, 0x69, 0x20, 0x6C, 0x75, 0x63, 0x74, 0x75, 0x73, 0x20, 0x65,
    0x74, 0x20, 0x75, 0x6C, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x20, 0x70,
    0x6F, 0x73, 0x75, 0x65, 0x72, 0x65, 0x20, 0x63, 0x75, 0x62, 0x69, 0x6C,
    0x69, 0x61, 0x20, 0x63, 0x75, 0x72, 0x61, 0x65, 0x3B, 0x20, 0x53, 0x65,
    0x64, 0x20, 0x6C, 0x69, 0x67, 0x75, 0x6C, 0x61, 0x20, 0x64, 0x6F, 0x6C,
    0x6F, 0x72, 0x2C, 0x20, 0x69, 0x6D, 0x70, 0x65, 0x72, 0x64, 0x69, 0x65,
    0x74, 0x20, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x69, 0x73, 0x20, 0x61,
    0x72, 0x63, 0x75, 0x20, 0x65, 0x74, 0x2C, 0x20, 0xA4, 0x02, 0x01, 0x55,
    0x12, 0x20, 0xFC, 0x23, 0xCE, 0x04, 0xE0, 0x31, 0x02, 0x7D, 0x66, 0xDE,
    0x41, 0xB2, 0x6C, 0x0F, 0xFC, 0xB4, 0x55, 0x23, 0x37, 0xAF, 0xEE, 0x4F,
    0xE7, 0xF7, 0x96, 0x1D, 0xE7, 0x47, 0x43, 0xBA, 0x7F, 0x14, 0x73, 0x65,
    0x6D, 0x70, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6E, 0x63, 0x69, 0x64, 0x75,
    0x6E, 0x74, 0x20, 0x75, 0x72, 0x6E, 0x61, 0x2E, 0x20, 0x44, 0x6F, 0x6E,
    0x65, 0x63, 0x20, 0x65, 0x74, 0x20, 0x74, 0x65, 0x6D, 0x70, 0x6F, 0x72,
    0x20, 0x61, 0x75, 0x67, 0x75, 0x65, 0x2C, 0x20, 0x71, 0x75, 0x69, 0x73,
    0x20, 0x73, 0x6F, 0x6C, 0x6C, 0x69, 0x63, 0x69, 0x74, 0x75, 0x64, 0x69,
    0x6E, 0x20, 0x6D, 0x65, 0x74, 0x75, 0x73, 0x2E, 0x20, 0x43, 0x75, 0x72,
    0x61, 0x62, 0x69, 0x74, 0x75, 0x72, 0x20, 0x73, 0x65, 0x6D, 0x70, 0x65,
    0x72, 0x20, 0x75, 0x6C, 0x6C, 0x61, 0x6D, 0x63, 0x6F, 0x72, 0x70, 0x65,
    0x72, 0x20, 0x61, 0x6C, 0x69, 0x71, 0x75, 0x65, 0x74, 0x2E, 0x20, 0x4D,
    0x61, 0x75, 0x72, 0x69, 0x73, 0x20, 0x68, 0x65, 0x6E, 0x64, 0x72, 0x65,
    0x72, 0x69, 0x74, 0x20, 0x73, 0x6F, 0x64, 0x61, 0x6C, 0x65, 0x73, 0x20,
    0x6C, 0x65, 0x63, 0x74, 0x75, 0x73, 0x20, 0x65, 0x67, 0x65, 0x74, 0x20,
    0x66, 0x65, 0x72, 0x6D, 0x65, 0x6E, 0x74, 0x75, 0x6D, 0x2E, 0x20, 0x50,
    0x72, 0x6F, 0x69, 0x6E, 0x20, 0x73, 0x6F, 0x6C, 0x6C, 0x69, 0x63, 0x69,
    0x74, 0x75, 0x64, 0x69, 0x6E, 0x20, 0x76, 0x65, 0x73, 0x74, 0x69, 0x62,
    0x75, 0x6C, 0x75, 0x6D, 0x20, 0x63, 0x6F, 0x6D, 0x6D, 0x6F, 0x64, 0x6F,
    0x2E, 0x20, 0x56, 0x69, 0x76, 0x61, 0x6D, 0x75, 0x73, 0x20, 0x6E, 0x65,
    0x63, 0x20, 0x6C, 0x65, 0x63, 0x74, 0x75, 0x73, 0x20, 0x65, 0x75, 0x20,
    0x61, 0x75, 0x67, 0x75, 0x65, 0x20, 0x61, 0x6C, 0x69, 0x71, 0x75, 0x65,
    0x74, 0x20, 0x64, 0x69, 0x67, 0x6E, 0x69, 0x73, 0x73, 0x69, 0x6D, 0x20,
    0x6E, 0x65, 0x63, 0x20, 0x63, 0x6F, 0x6E, 0x64, 0x69, 0x6D, 0x65, 0x6E,
    0x74, 0x75, 0xA4, 0x02, 0x01, 0x55, 0x12, 0x20, 0xD4, 0xF8, 0x69, 0x56,
    0x6C, 0x45, 0xA3, 0x43, 0xBE, 0xFF, 0xDE, 0x1B, 0x7F, 0x36, 0x43, 0x07,
    0xD5, 0x19, 0xED, 0x64, 0x48, 0x77, 0xB6, 0x46, 0xE8, 0x33, 0xAD, 0xE9,
    0x80, 0x98, 0x4F, 0xA1, 0x6D, 0x20, 0x6A, 0x75, 0x73, 0x74, 0x6F, 0x2E,
    0x20, 0x49, 0x6E, 0x20, 0x68, 0x61, 0x63, 0x20, 0x68, 0x61, 0x62, 0x69,
    0x74, 0x61, 0x73, 0x73, 0x65, 0x20, 0x70, 0x6C, 0x61, 0x74, 0x65, 0x61,
    0x20, 0x64, 0x69, 0x63, 0x74, 0x75, 0x6D, 0x73, 0x74, 0x2E, 0x20, 0x4D,
    0x61, 0x75, 0x72, 0x69, 0x73, 0x20, 0x76, 0x65, 0x6C, 0x20, 0x73, 0x65,
    0x6D, 0x20, 0x6E, 0x65, 0x71, 0x75, 0x65, 0x2E, 0x0A, 0x0A, 0x56, 0x69,
    0x76, 0x61, 0x6D, 0x75, 0x73, 0x20, 0x66, 0x69, 0x6E, 0x69, 0x62, 0x75,
    0x73, 0x2C, 0x20, 0x65, 0x6E, 0x69, 0x6D, 0x20, 0x61, 0x74, 0x20, 0x6C,
    0x61, 0x63, 0x69, 0x6E, 0x69, 0x61, 0x20, 0x73, 0x65, 0x6D, 0x70, 0x65,
    0x72, 0x2C, 0x20, 0x61, 0x72, 0x63, 0x75, 0x20, 0x65, 0x72, 0x61, 0x74,
    0x20, 0x67, 0x72, 0x61, 0x76, 0x69, 0x64, 0x61, 0x20, 0x6C, 0x61, 0x63,
    0x75, 0x73, 0x2C, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6D, 0x65, 0x74,
    0x20, 0x67, 0x72, 0x61, 0x76, 0x69, 0x64, 0x61, 0x20, 0x6D, 0x61, 0x67,
    0x6E, 0x61, 0x20, 0x6F, 0x72, 0x63, 0x69, 0x20, 0x73, 0x69, 0x74, 0x20,
    0x61, 0x6D, 0x65, 0x74, 0x20, 0x65, 0x73, 0x74, 0x2E, 0x20, 0x53, 0x65,
    0x64, 0x20, 0x6E, 0x6F, 0x6E, 0x20, 0x6C, 0x65, 0x6F, 0x20, 0x6C, 0x61,
    0x63, 0x75, 0x73, 0x2E, 0x20, 0x4E, 0x75, 0x6C, 0x6C, 0x61, 0x6D, 0x20,
    0x76, 0x69, 0x76, 0x65, 0x72, 0x72, 0x61, 0x20, 0x69, 0x70, 0x73, 0x75,
    0x6D, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6E, 0x63, 0x69, 0x64, 0x75, 0x6E,
    0x74, 0x20, 0x64, 0x61, 0x70, 0x69, 0x62, 0x75, 0x73, 0x2E, 0x20, 0x4E,
    0x75, 0x6C, 0x6C, 0x61, 0x20, 0x70, 0x75, 0x6C, 0x76, 0x69, 0x6E, 0x61,
    0x72, 0x20, 0x6C, 0x69, 0x67, 0x75, 0x6C, 0x61, 0xA4, 0x02, 0x01, 0x55,
    0x12, 0x20, 0x4B, 0x5E, 0xCF, 0x42, 0x15, 0x42, 0xDC, 0x1B, 0x1C, 0x91,
    0xCD, 0xC7, 0xF2, 0x22, 0xBB, 0xE2, 0x8E, 0xDA, 0x1B, 0xFB, 0x87, 0x6D,
    0xE3, 0x0C, 0xC9, 0x17, 0x78, 0x88, 0x6D, 0xEF, 0x45, 0x39, 0x20, 0x73,
    0x69, 0x74, 0x20, 0x61, 0x6D, 0x65, 0x74, 0x20, 0x61, 0x6E, 0x74, 0x65,
    0x20, 0x75, 0x6C, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x20, 0x74, 0x65,
    0x6D, 0x70, 0x75, 0x73, 0x2E, 0x20, 0x50, 0x72, 0x6F, 0x69, 0x6E, 0x20,
    0x70, 0x75, 0x72, 0x75, 0x73, 0x20, 0x75, 0x72, 0x6E, 0x61, 0x2C, 0x20,
    0x73, 0x65, 0x6D, 0x70, 0x65, 0x72, 0x20, 0x73, 0x65, 0x64, 0x20, 0x6C,
    0x6F, 0x62, 0x6F, 0x72, 0x74, 0x69, 0x73, 0x20, 0x71, 0x75, 0x69, 0x73,
    0x2C, 0x20, 0x67, 0x72, 0x61, 0x76, 0x69, 0x64, 0x61, 0x20, 0x76, 0x69,
    0x74, 0x61, 0x65, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6D, 0x2E, 0x20, 0x41,
    0x6C, 0x69, 0x71, 0x75, 0x61, 0x6D, 0x20, 0x6D, 0x69, 0x20, 0x75, 0x72,
    0x6E, 0x61, 0x2C, 0x20, 0x70, 0x75, 0x6C, 0x76, 0x69, 0x6E, 0x61, 0x72,
    0x20, 0x65, 0x75, 0x20, 0x62, 0x69, 0x62, 0x65, 0x6E, 0x64, 0x75, 0x6D,
    0x20, 0x71, 0x75, 0x69, 0x73, 0x2C, 0x20, 0x63, 0x6F, 0x6E, 0x76, 0x61,
    0x6C, 0x6C, 0x69, 0x73, 0x20, 0x61, 0x63, 0x20, 0x64, 0x6F, 0x6C, 0x6F,
    0x72, 0x2E, 0x20, 0x49, 0x6E, 0x20, 0x67, 0x72, 0x61, 0x76, 0x69, 0x64,
    0x61, 0x20, 0x6A, 0x75, 0x73, 0x74, 0x6F, 0x20, 0x73, 0x65, 0x64, 0x20,
    0x72, 0x69, 0x73, 0x75, 0x73, 0x20, 0x75, 0x6C, 0x6C, 0x61, 0x6D, 0x63,
    0x6F, 0x72, 0x70, 0x65, 0x72, 0x2C, 0x20, 0x76, 0x69, 0x74, 0x61, 0x65,
    0x20, 0x6C, 0x75, 0x63, 0x74, 0x75, 0x73, 0x20, 0x6D, 0x61, 0x73, 0x73,
    0x61, 0x20, 0x68, 0x65, 0x6E, 0x64, 0x72, 0x65, 0x72, 0x69, 0x74, 0x2E,
    0x20, 0x50, 0x65, 0x6C, 0x6C, 0x65, 0x6E, 0x74, 0x65, 0x73, 0x71, 0x75,
    0x65, 0x20, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x6E, 0x74, 0x20, 0x61,
    0x6D, 0x65, 0x26, 0x01, 0x55, 0x12, 0x20, 0xB2, 0x9E, 0xDF, 0x0C, 0xCE,
    0x95, 0x4F, 0x7E, 0xBC, 0x08, 0x0C, 0x72, 0x3F, 0x9D, 0xF0, 0x3C, 0x23,
    0x0B, 0xF3, 0x02, 0xD7, 0x97, 0xF8, 0xDB, 0x44, 0x5A, 0x17, 0xD2, 0xD1,
    0x31, 0xE0, 0x83, 0x74, 0x2E,
};

const struct {
  std::string cid;
  bool is_root;
  bool is_content;
  bool is_meta;
} kBlockCases[] = {
    {"bafkreifst3pqztuvj57lycamoi7z34b4emf7gawxs74nwrc2c7jncmpaqm", false, true,
     false},
    {"bafkreicll3huefkc3qnrzeony7zcfo7cr3nbx64hnxrqzsixpceg332fhe", false, true,
     false},
    {"bafkreigu7buvm3cfunb35766dn7tmqyh2um62zcio63en2btvxuybgcpue", false, true,
     false},
    {"bafkreih4ephajybraj6wnxsbwjwa77fukurtpl7oj7t7pfq545duhot7cq", false, true,
     false},
    {"bafkreie5noke3mb7hqxukzcy73nl23k6lxszxi5w3dtmuwz62wnvkpsscm", false, true,
     false},
    {"bafybeigcisqd7m5nf3qmuvjdbakl5bdnh4ocrmacaqkpuh77qjvggmt2sa", false,
     false, true},
    {"bafkreifjjcie6lypi6ny7amxnfftagclbuxndqonfipmb64f2km2devei4", false, true,
     false},
    {"bafkreifkam6ns4aoolg3wedr4uzrs3kvq66p4pecirz6y2vlrngla62mxm", false, true,
     false},
    {"bafybeicnmple4ehlz3ostv2sbojz3zhh5q7tz5r2qkfdpqfilgggeen7xm", false,
     false, true},
    {"bafybeidh6k2vzukelqtrjsmd4p52cpmltd2ufqrdtdg6yigi73in672fwu", false,
     false, true}};

constexpr char kDefaultIpfsUrl[] =
    "ipfs://bafybeigcisqd7m5nf3qmuvjdbakl5bdnh4ocrmacaqkpuh77qjvggmt2sa";

void EnumerateCarBlocks(
    std::unordered_map<std::string, std::unique_ptr<ipfs::ipld::Block>>&
        all_blocks,
    const std::string& cid_to_start) {
  std::stack<ipfs::ipld::Block*> blocks_stack;
  ipfs::ipld::Block* current = all_blocks[cid_to_start].get();

  while (current != nullptr || !blocks_stack.empty()) {
    if (current) {
      DCHECK(current != nullptr);
      blocks_stack.push(current);
    }

    while (current != nullptr) {
      if (!current->GetLinks()) {
        current = nullptr;
        continue;
      }

      for (const auto& item : *current->GetLinks()) {
        current = all_blocks[item.hash].get();
        DCHECK(current != nullptr);
        blocks_stack.push(current);
      }
    }

    current = blocks_stack.top();
    blocks_stack.pop();

    const auto* block_case =
        base::ranges::find_if(kBlockCases, [current](const auto& item_case) {
          return item_case.cid == current->Cid();
        });
    EXPECT_NE(block_case, base::ranges::end(kBlockCases));
    EXPECT_EQ(current->IsRoot(), block_case->is_root);
    EXPECT_EQ(current->IsContent(), block_case->is_content);
    EXPECT_EQ(current->IsMetadata(), block_case->is_meta);
    if (current->IsContent()) {
      EXPECT_GT(current->GetContentData()->size(), 0UL);
      EXPECT_TRUE(current->IsVerified().has_value());
      EXPECT_TRUE(current->IsVerified().value());
    } else {
      EXPECT_FALSE(current->IsVerified().has_value());
    }

    LOG(INFO) << "Processing:"
              << "\r\nCID:        " << current->Cid().c_str()
              << "\r\nis_root:    " << current->IsRoot()
              << "\r\nis_content: " << current->IsContent()
              << "\r\nis_meta:    " << current->IsMetadata()
              << "\r\ncontent_data_size:"
              << (current->IsContent() ? current->GetContentData()->size() : 0)
              << "\r\nverified:   "
              << (current->IsVerified().has_value()
                      ? (current->IsVerified().value() ? "YES" : "NO")
                      : "N/A");

    current = nullptr;
  }
}

void TestBlockExisting(
    std::unordered_map<std::string, std::unique_ptr<ipfs::ipld::Block>>&
        all_blocks) {
  ipfs::ipld::Block* header_block = all_blocks[""].get();
  auto* root_cids = header_block->Meta().Find("roots");
  EXPECT_TRUE(root_cids);

  EXPECT_TRUE(header_block->Cid().empty());
  EXPECT_TRUE(header_block->IsRoot() && !header_block->IsContent() &&
              !header_block->IsMetadata());
  EXPECT_EQ(root_cids->GetList().size(), 1UL);
  EXPECT_EQ(root_cids->GetList()[0].GetString(),
            "bafybeidh6k2vzukelqtrjsmd4p52cpmltd2ufqrdtdg6yigi73in672fwu");

  base::ranges::for_each(root_cids->GetList(),
                         [&all_blocks](const base::Value& item) {
                           EnumerateCarBlocks(all_blocks, item.GetString());
                         });
}

}  // namespace

class BlockReaderUnitTest : public testing::Test {
 public:
  BlockReaderUnitTest() = default;
  ~BlockReaderUnitTest() override = default;

 protected:
  void SetUp() override {
    TestingProfile::Builder builder;
    auto prefs =
        std::make_unique<sync_preferences::TestingPrefServiceSyncable>();
    RegisterUserProfilePrefs(prefs->registry());
    builder.SetPrefService(std::move(prefs));
    profile_ = builder.Build();
  }

  PrefService* GetPrefs() { return profile_->GetPrefs(); }
  network::TestURLLoaderFactory* url_loader_factory() {
    return &url_loader_factory_;
  }
  base::test::TaskEnvironment* task_environment() { return &task_environment_; }

 private:
  content::BrowserTaskEnvironment task_environment_{
      base::test::TaskEnvironment::TimeSource::MOCK_TIME};
  std::unique_ptr<TestingProfile> profile_;
  network::TestURLLoaderFactory url_loader_factory_;
};

TEST_F(BlockReaderUnitTest, BasicTestSteps) {
  std::vector<char> content_data;
  for (const auto& b : kCarvData) {
    content_data.push_back(b);
  }
  std::unordered_map<std::string, std::unique_ptr<ipfs::ipld::Block>>
      all_blocks;
  auto request_callback =
      base::BindLambdaForTesting([&all_blocks](std::unique_ptr<ipfs::ipld::Block> block) {
        LOG(INFO) << "[IPFS] request_callback block.cid:" << block->Cid()
                  << " is_root:" << block->IsRoot()
                  << " is_meta:" << block->IsMetadata()
                  << " is_content:" << block->IsContent();
        all_blocks.try_emplace(block->Cid(), std::move(block));
      });
  url_loader_factory()->SetInterceptor(
      base::BindLambdaForTesting([&](const network::ResourceRequest& request) {
        LOG(INFO) << "[IPFS] Request url: " << request.url;
        ASSERT_TRUE(request.url.is_valid());
        ASSERT_TRUE(ipfs::IsDefaultGatewayURL(request.url, GetPrefs()));

        ASSERT_TRUE(base::Contains(request.url.query(), "format=car"));
        ASSERT_TRUE(base::Contains(request.url.query(), "dag-scope=entity"));
        ASSERT_TRUE(
            base::Contains(net::UnescapePercentEncodedUrl(request.url.query()),
                           "entity-bytes=0:0"));

        auto response_head = network::mojom::URLResponseHead::New();
        response_head->headers =
            base::MakeRefCounted<net::HttpResponseHeaders>("");
        response_head->headers->SetHeader(
            "Content-Type",
            "application/vnd.ipld.car; version=1; order=dfs; dups=n");
        response_head->headers->ReplaceStatusLine("HTTP/1.1 200 OK");
        url_loader_factory()->AddResponse(
            request.url, std::move(response_head),
            std::string(content_data.data(), content_data.size()),
            network::URLLoaderCompletionStatus(net::OK));
      }));
  GURL url(kDefaultIpfsUrl);
  auto br = std::make_unique<ipfs::ipld::CarBlockReader>(
      std::make_unique<ipfs::ipld::CarContentRequester>(
          url,
          base::MakeRefCounted<network::WeakWrapperSharedURLLoaderFactory>(
              url_loader_factory()),
          GetPrefs()));
  br->Read(request_callback);
  task_environment()->RunUntilIdle();
  LOG(INFO) << "count:" << all_blocks.size();
  EXPECT_GT(all_blocks.size(), 0UL);
  TestBlockExisting(all_blocks);
}
